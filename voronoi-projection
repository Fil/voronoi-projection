#! /usr/bin/env node --max-old-space-size=4096

const fs = require("fs"),
  topojson = require("topojson-client"),
  Canvas = require("canvas"),
  d3 = Object.assign(
    {},
    require("d3-array"),
    require("d3-geo"),
    require("d3-geo-voronoi"),
    require("d3-geo-polygon")
  ),
  radians = Math.PI / 180;

const commander = require("commander");

commander
  .version(require("./package.json").version)
  .usage("[options]")
  .description("Generate a Voronoi map.")
  .option("-n, --n <value>", "number of faces", 200)
  .option("-w, --width <value>", "width", 2 * 960)
  .option("--height <value>", "height", null)
  .option("--colors", "color the faces", false)
  .option("--angle <value>", "angle (in degrees)", "auto")
  .option("--graticule", "show graticule", false)
  .option(
    "--land <value>",
    "strategy for land (auto, full, point, poly, none)",
    "auto"
  )
  .option("--ocean", "favor ocean links", false)
  .option("--fibonacci", "fibonacci distribution", false)
  .option("--centroids", "large countries centroids distribution", false)
  .option("--noise <value>", "perturbation (try: 1)", 0)
  .parse(process.argv);

var width = +commander.width,
  height = +commander.height || ((3 / 5) * width) | 0;

var canvas = new Canvas(width, height),
  context = canvas.getContext("2d");

var world = require("visionscarto-world-atlas/world/110m.json"),
  land = topojson.feature(world, world.objects.land),
  countries = topojson.feature(world, world.objects.countries),
  graticule = d3.geoGraticule();

const n = +commander.n,
  ocean = !!commander.ocean,
  pointdistribution = commander.centroids
    ? centroids
    : commander.fibonacci
      ? fibonacci
      : randompoints;

var time = Date.now();

randomseed(4);

process.stderr.write("computing points… ");

const points = pointdistribution(n);
points.forEach((p, i) => {
  p[2] = i;
});

if (commander.noise) {
  const perturb = +commander.noise / Math.sqrt(n);
  points.forEach((p, i) => {
    p[0] += ((Math.random() - 0.5) * perturb * 180) / Math.cos(p[1] * radians);
    p[1] = (p[1] + (Math.random() - 0.5) * perturb * 180) % 90;
  });
}

console.warn(Date.now() - time);
time = Date.now();
process.stderr.write("computing voronoi… ");

const voro = d3.geoVoronoi()(points);

const polygons = voro.polygons();

// this gains 99% on the computation of points.property.land
// const contains = (f => d3.geoContains(land,f));
console.warn(Date.now() - time);
time = Date.now();
process.stderr.write("computing distances… ");

const contains = geoContainsCache(land),
  inland = points.map(d => +contains(d)),
  shore = points.map(dist2shore());

function cost2(a, b) {
  var mult = (1 + shore[a[2]]) ** 2 * (1 + shore[b[2]]) ** 2;
  if (ocean) mult = 1 / mult;
  return d3.geoDistance(a, b) / mult;
}

const kruskal = (function() {
  // https://github.com/mikolalysenko/union-find
  const UnionFind = (function() {
    "use strict";
    "use restrict";

    function UnionFind(count) {
      this.roots = new Array(count);
      this.ranks = new Array(count);

      for (var i = 0; i < count; ++i) {
        this.roots[i] = i;
        this.ranks[i] = 0;
      }
    }

    var proto = UnionFind.prototype;

    Object.defineProperty(proto, "length", {
      get: function() {
        return this.roots.length;
      }
    });

    proto.makeSet = function() {
      var n = this.roots.length;
      this.roots.push(n);
      this.ranks.push(0);
      return n;
    };

    proto.find = function(x) {
      var x0 = x;
      var roots = this.roots;
      while (roots[x] !== x) {
        x = roots[x];
      }
      while (roots[x0] !== x) {
        var y = roots[x0];
        roots[x0] = x;
        x0 = y;
      }
      return x;
    };

    proto.link = function(x, y) {
      var xr = this.find(x),
        yr = this.find(y);
      if (xr === yr) {
        return;
      }
      var ranks = this.ranks,
        roots = this.roots,
        xd = ranks[xr],
        yd = ranks[yr];
      if (xd < yd) {
        roots[xr] = yr;
      } else if (yd < xd) {
        roots[yr] = xr;
      } else {
        roots[yr] = xr;
        ++ranks[xr];
      }
    };

    return UnionFind;
  })();

  function kruskal(graph, dist) {
    // 1   A := ø
    const A = [];
    // 2   pour chaque sommet v de G :
    // 3      créerEnsemble(v)
    let n = -Infinity;
    graph.forEach(l => {
      if (l.source.index > n) n = l.source.index;
      if (l.target.index > n) n = l.target.index;
    });

    const uf = new UnionFind(n);
    // 4   trier les arêtes de G par poids croissant

    graph = graph.map(l => {
      l.w = dist ? dist(l.source, l.target) : l.length;
      return l;
    });
    graph
      .sort((a, b) => d3.ascending(a.w, b.w))
      // 5   pour chaque arête (u, v) de G prise par poids croissant :
      .forEach(l => {
        // 6      si find(u) ≠ find(v) :
        if (uf.find(l.source.index) != uf.find(l.target.index)) {
          // 7         ajouter l'arête (u, v) à l'ensemble A
          A.push(l);
          // 8         union(u, v)
          uf.link(l.source.index, l.target.index);
        }
      });
    // 9   retourner A
    return A;
    //	yield uf;
  }

  return kruskal;
})();

console.warn(Date.now() - time);
time = Date.now();
process.stderr.write("computing tree… ");
const parents = (function() {
  var n = points.length;

  var links = voro.links().features.map(d => d.properties); //.filter(d => d.urquhart)

  var k = kruskal(
    links.map(
      d => ((d.source.index = d.source[2]), (d.target.index = d.target[2]), d)
    ),
    cost2
  ).map(l => ({
    type: "LineString",
    coordinates: [l.source, l.target],
    properties: l
  }));

  // Build a tree of the faces
  var parents = [-1];
  var search = n - 1;
  do {
    k.forEach(l => {
      var s = l.properties.source[2],
        t = l.properties.target[2];
      if (parents[s] !== undefined && parents[t] === undefined) {
        parents[t] = s;
        search--;
      } else if (parents[t] !== undefined && parents[s] === undefined) {
        parents[s] = t;
        search--;
      }
    });
  } while (search > 0);

  return parents;
})();

const degrees = 180 / Math.PI;

context.fillStyle = "#fff";
context.fillRect(0, 0, width, height);

console.warn(Date.now() - time);
time = Date.now();
process.stderr.write("computing projection… ");
const projection = d3.geoPolyhedralVoronoi(parents, polygons, null, voro.find);

var path = d3
  .geoPath()
  .projection(projection)
  .context(context);

if (commander.angle === "auto") {
  console.warn(Date.now() - time);
  time = Date.now();
  process.stderr.write("computing angle… ");
  commander.angle = angle(points, projection);
}

console.warn(Date.now() - time);
time = Date.now();

projection
  .angle(+commander.angle)
  .fitExtent([[3, 3], [width - 3, height - 3]], { type: "Sphere" });
console.warn("angle", +commander.angle);

process.stderr.write("projecting sphere… ");
if (commander.colors) {
  const colors = get_colors(commander.colors);
  const preclip = projection.preclip();
  projection.preclip(s => s);
  points.forEach((p, i) => {
    context.beginPath();
    path(shrink(polygons.features[i].geometry));
    context.fillStyle = colors[(i * 13) % colors.length];
    context.fill();
  });
  projection.preclip(preclip);
} else {
  context.beginPath();
  path({ type: "Sphere" });
  context.fillStyle = "#fefef6";
  context.fill();
}

if (commander.land === "auto") commander.land = n < 1000 ? "full" : "poly";

console.warn(Date.now() - time);
time = Date.now();
process.stderr.write("projecting land… ");
context.beginPath();
switch (commander.land) {
  case "full":
    path(land);
    break;
  case "point":
    path.pointRadius(Math.sqrt(300000 / n));
    points.forEach(p => contains(p) && path({ type: "Point", coordinates: p }));
    break;

  case "poly":
    const preclip = projection.preclip();
    projection.preclip(s => s);
    context.beginPath();
    points.forEach(
      (p, i) => contains(p) && path(shrink(polygons.features[i].geometry))
    );
    projection.preclip(preclip);
    break;

  case "none":
    break;
}
context.fillStyle = "#000";
context.fill();

if (commander.graticule) {
  console.warn(Date.now() - time);
  time = Date.now();
  process.stderr.write("projecting graticule… ");
  context.beginPath();
  path(graticule());
  context.strokeStyle = "rgba(119,119,119,0.5)";
  context.stroke();
}

console.warn(Date.now() - time);
time = Date.now();
process.stderr.write("projecting sphere… ");
context.beginPath();
path({ type: "Sphere" });
context.strokeStyle = "#000";
context.stroke();

console.warn(Date.now() - time);
time = Date.now();
canvas.pngStream().pipe(process.stdout);

////

// https://beta.observablehq.com/@fil/another-hex-map#geoContainsCache
function geoContainsCache(land) {
  var w = 5000,
    h = 5000,
    projection = d3.geoAzimuthalEqualArea().fitSize([w, h], { type: "Sphere" }),
    canvas = new Canvas(w, h),
    context = canvas.getContext("2d"),
    path = d3.geoPath(projection, context);
  canvas.width = w;
  canvas.height = h;
  context.fillStyle = "white";
  context.fillRect(0, 0, w, h);
  context.fillStyle = "black";
  context.beginPath(), path(land), context.fill();
  var c = context.getImageData(0, 0, w, h).data;
  canvas = context = path = null; // free up memory
  return function(point) {
    point = projection(point);
    return c[4 * (Math.floor(point[0]) + Math.floor(point[1]) * w)] < 128;
  };
}

function dist2shore() {
  const vertices = geoVertices(land),
    delaunay = d3.geoDelaunay(vertices);
  return function(a) {
    return (
      d3.geoDistance(a, vertices[delaunay.find(a[0], a[1])]) *
      (contains(a) ? 1 : -1)
    );
  };
}

// point distribution functions
function randompoints(n) {
  return [[0, 0]].concat(
    d3
      .range(n - 1)
      .map(i => [
        360 * Math.random() - 180,
        90 * (Math.random() - Math.random())
      ])
  );
}

function fibonacci(n) {
  const phi = (1 + Math.sqrt(5)) / 2;
  return d3.range(n).map(i => {
    const x = i / phi,
      y = i / n;
    return [
      ((x * 360) % 360) - 180,
      (Math.acos(2 * y - 1) / Math.PI) * 180 - 90
    ];
  });
}

function centroids(n) {
  return countries.features
    .slice()
    .sort((a, b) => d3.geoArea(b) - d3.geoArea(a))
    .slice(0, n)
    .map(d3.geoCentroid);
}

function randomseed(k) {
  Math.seed = function(s) {
    return function() {
      s = Math.sin(s) * 10000;
      return s - Math.floor(s);
    };
  };
  Math.random = Math.seed(k);
}

function geoVertices(feature) {
  const vertices = [];
  const stream = {
    point: function(lambda, phi) {
      vertices.push([lambda, phi]);
    },
    lineStart: function() {},
    lineEnd: function() {},
    polygonStart: function() {},
    polygonEnd: function() {}
  };
  d3.geoStream(feature, stream);
  return vertices;
}

function shrink(polygon) {
  const c = d3.geoCentroid(polygon);
  return {
    type: "Polygon",
    coordinates: [
      polygon.coordinates[0].map(d => d3.geoInterpolate(d, c)(0.001))
    ]
  };
}

// find a good angle for the projection
function angle(points, projection) {
  const A = convexHull(points.map(projection));
  return d3.scan(
    d3.range(180).map(function(angle) {
      const c = Math.cos(angle * radians),
        s = -Math.sin(angle * radians),
        w = d3.extent(A.map(p => p[1] * c + p[0] * s));
      return w[1] - w[0];
    })
  );
}

/**
 * @param points An array of [X, Y] coordinates
 * https://beta.observablehq.com/@fil/planar-hull-andrews-monotone-chain-algorithm
 */
function convexHull(points) {
  function cross(a, b, o) {
    return (a[0] - o[0]) * (b[1] - o[1]) - (a[1] - o[1]) * (b[0] - o[0]);
  }

  points.sort(function(a, b) {
    return a[0] == b[0] ? a[1] - b[1] : a[0] - b[0];
  });
  var lower = [];
  for (var i = 0; i < points.length; i++) {
    while (
      lower.length >= 2 &&
      cross(lower[lower.length - 2], lower[lower.length - 1], points[i]) <= 0
    ) {
      lower.pop();
    }
    lower.push(points[i]);
  }
  var upper = [];
  for (var i = points.length - 1; i >= 0; i--) {
    while (
      upper.length >= 2 &&
      cross(upper[upper.length - 2], upper[upper.length - 1], points[i]) <= 0
    ) {
      upper.pop();
    }
    upper.push(points[i]);
  }

  lower.pop();
  return lower.concat(upper);
}

function get_colors(colors) {
  // https://beta.observablehq.com/@fil/colormaps / roma
  return [
    "#7e1900",
    "#801c01",
    "#811f02",
    "#822203",
    "#832504",
    "#852705",
    "#862a06",
    "#872d06",
    "#882f07",
    "#8a3108",
    "#8b3409",
    "#8c360a",
    "#8d380b",
    "#8e3b0c",
    "#8f3d0c",
    "#903f0d",
    "#92410e",
    "#93440f",
    "#944610",
    "#954811",
    "#964a12",
    "#974c13",
    "#984e14",
    "#995015",
    "#9a5315",
    "#9b5516",
    "#9c5717",
    "#9d5918",
    "#9e5b19",
    "#9f5d1a",
    "#a05f1b",
    "#a1611c",
    "#a2631c",
    "#a3651d",
    "#a4671e",
    "#a5691f",
    "#a66b20",
    "#a76d21",
    "#a86f21",
    "#a97122",
    "#aa7323",
    "#ab7524",
    "#ac7725",
    "#ad7926",
    "#ae7c27",
    "#af7e27",
    "#b08028",
    "#b18229",
    "#b2842a",
    "#b3862b",
    "#b4882c",
    "#b58a2d",
    "#b68c2e",
    "#b78e2e",
    "#b8902f",
    "#b99230",
    "#ba9431",
    "#bb9632",
    "#bc9933",
    "#bd9b35",
    "#be9d36",
    "#bf9f37",
    "#c0a138",
    "#c1a339",
    "#c2a63b",
    "#c3a83c",
    "#c4aa3e",
    "#c6ac3f",
    "#c7af41",
    "#c8b143",
    "#c9b344",
    "#cab646",
    "#cbb848",
    "#cdba4a",
    "#cebc4d",
    "#cfbf4f",
    "#d0c151",
    "#d2c354",
    "#d3c556",
    "#d4c859",
    "#d5ca5c",
    "#d6cc5e",
    "#d8ce61",
    "#d9d064",
    "#dad267",
    "#dbd36a",
    "#dcd56c",
    "#ddd76f",
    "#ded872",
    "#dfda75",
    "#e0db78",
    "#e0dc7b",
    "#e1de7e",
    "#e2df80",
    "#e3e083",
    "#e3e186",
    "#e4e289",
    "#e4e38b",
    "#e5e48e",
    "#e5e590",
    "#e5e593",
    "#e6e695",
    "#e6e798",
    "#e6e79a",
    "#e6e89d",
    "#e6e89f",
    "#e6e9a1",
    "#e6e9a4",
    "#e6eaa6",
    "#e6eaa8",
    "#e6ebaa",
    "#e5ebad",
    "#e5ebaf",
    "#e4ecb1",
    "#e4ecb3",
    "#e3ecb5",
    "#e2ecb7",
    "#e1edb9",
    "#e0edba",
    "#dfedbc",
    "#deedbe",
    "#ddedc0",
    "#dbedc1",
    "#daeec3",
    "#d8eec4",
    "#d7eec6",
    "#d5eec7",
    "#d3eec9",
    "#d1edca",
    "#cfedcb",
    "#cdedcc",
    "#cbedcd",
    "#c9edcf",
    "#c6edd0",
    "#c4ecd1",
    "#c1ecd1",
    "#bfecd2",
    "#bcebd3",
    "#b9ebd4",
    "#b7ead5",
    "#b4ead5",
    "#b1e9d6",
    "#aee9d7",
    "#abe8d7",
    "#a8e7d8",
    "#a5e7d8",
    "#a2e6d9",
    "#9fe5d9",
    "#9ce4d9",
    "#99e3da",
    "#96e2da",
    "#93e1da",
    "#90e0da",
    "#8ddfda",
    "#8addda",
    "#87dcdb",
    "#84dbda",
    "#81d9da",
    "#7ed8da",
    "#7bd6da",
    "#78d5da",
    "#75d3da",
    "#73d1d9",
    "#70d0d9",
    "#6eced9",
    "#6bccd8",
    "#69cad8",
    "#67c9d7",
    "#65c7d7",
    "#63c5d6",
    "#61c3d6",
    "#5fc1d5",
    "#5ebfd4",
    "#5cbed4",
    "#5abcd3",
    "#59bad2",
    "#58b8d2",
    "#56b6d1",
    "#55b4d0",
    "#54b2d0",
    "#53b0cf",
    "#52afce",
    "#50adcd",
    "#4fabcd",
    "#4ea9cc",
    "#4da7cb",
    "#4da5ca",
    "#4ca4ca",
    "#4ba2c9",
    "#4aa0c8",
    "#499ec7",
    "#489cc7",
    "#479ac6",
    "#4799c5",
    "#4697c4",
    "#4595c3",
    "#4493c3",
    "#4492c2",
    "#4390c1",
    "#428ec0",
    "#418cc0",
    "#418abf",
    "#4089be",
    "#3f87bd",
    "#3e85bd",
    "#3e84bc",
    "#3d82bb",
    "#3c80bb",
    "#3c7eba",
    "#3b7db9",
    "#3a7bb8",
    "#3979b8",
    "#3978b7",
    "#3876b6",
    "#3774b5",
    "#3773b5",
    "#3671b4",
    "#356fb3",
    "#356eb3",
    "#346cb2",
    "#336ab1",
    "#3369b0",
    "#3267b0",
    "#3165af",
    "#3164ae",
    "#3062ae",
    "#2f61ad",
    "#2f5fac",
    "#2e5dac",
    "#2d5cab",
    "#2d5aaa",
    "#2c59a9",
    "#2b57a9",
    "#2b55a8",
    "#2a54a7",
    "#2952a7",
    "#2951a6",
    "#284fa5",
    "#274da5",
    "#274ca4",
    "#264aa3",
    "#2549a3",
    "#2547a2",
    "#2446a1",
    "#2344a1",
    "#2342a0",
    "#22419f",
    "#213f9f",
    "#203e9e",
    "#1f3c9d",
    "#1f3b9c",
    "#1e399c",
    "#1d379b",
    "#1c369a",
    "#1b349a",
    "#1a3399"
  ];
}
